#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <CL/opencl.h>
#include <pthread.h>


const char *kernelSource =                                       "\n" \
"#pragma OPENCL EXTENSION cl_khr_fp64 : enable                    \n" \
"__kernel void vecAdd(  __global float *a,                       \n" \
"                       __global float *b,                       \n" \
"                       __global float *c,                       \n" \
"                       const unsigned int n)                    \n" \
"{                                                               \n" \
"    //Get our global thread ID                                  \n" \
"    int id = get_global_id(0);                                  \n" \
"                                                                \n" \
"    //Make sure we do not go out of bounds                      \n" \
"    if (id < n)                                                 \n" \
"        c[id] = a[id] + b[id];                                  \n" \
"}                                                               \n" \
                                                                "\n" ;



cl_event eventLoadReady;
cl_event eventProcessReady;

cl_event eventLoadReady2;
cl_event eventProcessReady2;

cl_event eventsProcessReady[2];

pthread_t writeDataThread;
pthread_t processDataThread;

//Length of vectors
unsigned int n = 100;

// Host input vectors
double *h_a;
double *h_b;

double *h_a2;
double *h_b2;
// Host output vector
double *h_c;
double *h_c2;

// Device input buffers
cl_mem d_a;
cl_mem d_b;

cl_mem d_a2;
cl_mem d_b2;
// Device output buffer
cl_mem d_c;
cl_mem d_c2;


cl_platform_id cpPlatform;        // OpenCL platform
cl_device_id device_id;           // device ID
cl_context context;               // context
cl_command_queue queue;           // command queue
cl_program program;               // program
cl_kernel kernel;                 // kernel

void *loadData()
{
	// Size, in bytes, of each vector
	size_t bytes = n*sizeof(double);
	cl_command_queue queueWrite = clCreateCommandQueue(context, device_id, 0, 0);

	printf("loaddata start\n");
	// Write our data set into the input array in device memory
	clEnqueueWriteBuffer(queueWrite, d_a, CL_TRUE, 0, bytes, h_a, 0, NULL, NULL);
	clEnqueueWriteBuffer(queueWrite, d_b, CL_TRUE, 0, bytes, h_b, 0, NULL, NULL);
	clSetUserEventStatus(eventLoadReady, CL_COMPLETE);
	printf("loaddata start 1\n");
	// Write our data set into the input array in device memory
	clEnqueueWriteBuffer(queueWrite, d_a2, CL_TRUE, 0, bytes, h_a, 0, NULL, NULL);
	clEnqueueWriteBuffer(queueWrite, d_b2, CL_TRUE, 0, bytes, h_b, 0, NULL, NULL);
	clSetUserEventStatus(eventLoadReady2, CL_COMPLETE);
	printf("loaddata start 2\n");


	return NULL;

}



void *processData()
{
	size_t bytes = n*sizeof(double);
	cl_command_queue queueProcess = clCreateCommandQueue(context, device_id, 0, 0);
	printf("processdata start\n");
	// Read the results from the device
	clEnqueueReadBuffer(queueProcess, d_c, CL_TRUE, 0, bytes, h_c, 1, &eventProcessReady, NULL );
	//clEnqueueReadBuffer(queueProcess, d_c, CL_TRUE, 0, bytes, h_c, 1, &eventsProcessReady[0], NULL );
	printf("processdata start 2\n");
	clEnqueueReadBuffer(queueProcess, d_c2, CL_TRUE, 0, bytes, h_c2, 1, &eventProcessReady2, NULL );
	//clEnqueueReadBuffer(queueProcess, d_c2, CL_TRUE, 0, bytes, h_c2, 1, &eventsProcessReady[1], NULL );
	printf("processdata start 3\n");

	return NULL;
}

const char *ksrc(const char * filename) {
	char * buffer;
	long lSize;
	FILE * fp;

	fp = fopen (filename, "rb" );
	if( !fp ) perror(filename),exit(1);

	//get filesize
	fseek(fp , 0L , SEEK_END);
	lSize = ftell(fp);
	rewind(fp);

	buffer = (char *)calloc(1, lSize+1);
	if(!buffer) fclose(fp),fputs("memory alloc fails",stderr),exit(1);

	if( 1!=fread( buffer , lSize, 1 , fp) )
		fclose(fp),free(buffer),fputs("entire read fails",stderr),exit(1);

	fclose(fp);
	return buffer;;
}

void info(cl_device_id device) {
	char device_string[1024];
	size_t workgroups;

	clGetDeviceInfo(device, CL_DEVICE_NAME, sizeof(device_string), &device_string, NULL);
	printf("CL_DEVICE_NAME: \t\t\t%s\n", device_string);

	// CL_DEVICE_VENDOR
	clGetDeviceInfo(device, CL_DEVICE_VENDOR, sizeof(device_string), &device_string, NULL);
	printf("CL_DEVICE_VENDOR: \t\t\t%s\n", device_string);

	// CL_DRIVER_VERSION
	clGetDeviceInfo(device, CL_DRIVER_VERSION, sizeof(device_string), &device_string, NULL);
	printf("CL_DRIVER_VERSION: \t\t\t%s\n", device_string);

	// Max work group size
	clGetDeviceInfo(device, CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(workgroups), &workgroups, NULL);
	printf("Max work group size: \t\t\t%d\n", (int)workgroups);
}

int main() {
	//const char *kernelSource = ksrc("./reduction.cl");

	// Size, in bytes, of each vector
	size_t bytes = n*sizeof(double);

	// Allocate memory for each vector on host
	h_a = (double*)malloc(bytes);
	h_b = (double*)malloc(bytes);
	h_c = (double*)malloc(bytes);

	h_a2 = (double*)malloc(bytes);
	h_b2 = (double*)malloc(bytes);
	h_c2 = (double*)malloc(bytes);

	// Initialize vectors on host
	int i;
	for( i = 0; i < n; i++ )
	{
		h_a[i] = sinf(i)*sinf(i);
		h_b[i] = cosf(i)*cosf(i);

		h_a2[i] = sinf(i)*sinf(i);
		h_b2[i] = cosf(i)*cosf(i);
	}

	size_t globalSize, localSize;
	cl_int err;

	// Number of work items in each local work group
	localSize = 64;

	// Number of total work items - localSize must be devisor
	globalSize = ceil(n/(double)localSize)*localSize;

	// Bind to platform
	err = clGetPlatformIDs(1, &cpPlatform, NULL);

	// Get ID for the device
	err = clGetDeviceIDs(cpPlatform, CL_DEVICE_TYPE_GPU, 1, &device_id, NULL);
	info(device_id);

	// Create a context
	context = clCreateContext(0, 1, &device_id, NULL, NULL, &err);

	// Create a command queue
	queue = clCreateCommandQueue(context, device_id, 0, &err);

	// Create the compute program from the source buffer
	program = clCreateProgramWithSource(context, 1, (const char **) & kernelSource, NULL, &err);

	// Build the program executable
	clBuildProgram(program, 0, NULL, NULL, NULL, NULL);

	// Create the compute kernel in the program we wish to run
	kernel = clCreateKernel(program, "vecAdd", &err);
	if( err != CL_SUCCESS || kernel == NULL)
	{
		//openClFehler( err);
		fprintf( stderr, "ERROR: Failed at clCreateKernel()\n\n");
		//return 0;
	}


	// Create the input and output arrays in device memory for our calculation
	d_a = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
	d_b = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
	d_c = clCreateBuffer(context, CL_MEM_WRITE_ONLY, bytes, NULL, NULL);

	d_a2 = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
	d_b2 = clCreateBuffer(context, CL_MEM_READ_ONLY, bytes, NULL, NULL);
	d_c2 = clCreateBuffer(context, CL_MEM_WRITE_ONLY, bytes, NULL, NULL);

	eventLoadReady = clCreateUserEvent(context, &err);
	eventProcessReady = clCreateUserEvent(context, &err);

	eventLoadReady2 = clCreateUserEvent(context, &err);
	eventProcessReady2 = clCreateUserEvent(context, &err);

	pthread_create (&writeDataThread, NULL, loadData, NULL);
	pthread_create(&processDataThread, NULL, processData, NULL);

	 // Set the arguments to our compute kernel
	err  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_a);
	err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_b);
	err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &d_c);
	err |= clSetKernelArg(kernel, 3, sizeof(unsigned int), &n);
	// Execute the kernel over the entire range of the data set
	//err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &globalSize, &localSize, 1,  &eventLoadReady, &eventsProcessReady[0]);
	err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &globalSize, &localSize, 1,  &eventLoadReady, &eventProcessReady);
	clSetUserEventStatus(eventProcessReady, CL_COMPLETE);

	err  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &d_a2);
	err |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &d_b2);
	err |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &d_c2);
	err |= clSetKernelArg(kernel, 3, sizeof(unsigned int), &n);
	//err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &globalSize, &localSize, 1,  &eventLoadReady2, &eventsProcessReady[1]);
	err = clEnqueueNDRangeKernel(queue, kernel, 1, NULL, &globalSize, &localSize, 1,  &eventLoadReady2, &eventProcessReady2);
	clSetUserEventStatus(eventProcessReady2, CL_COMPLETE);

	//pthread_create(&processDataThread, NULL, processData, NULL);
	(void) pthread_join( processDataThread, NULL);
	(void) pthread_join( writeDataThread, NULL);

	//Sum up vector c and print result divided by n, this should equal 1 within error
	double sum = 0;
	double sum2 = 0;
	for(i=0; i<n; i++) {
		sum += h_c[i];
		sum2 += h_c2[i];
	}
	printf("final result: %f\n", sum/n);
	printf("final result: %f\n", sum2/n);

	// release OpenCL resources
	clReleaseMemObject(d_a);
	clReleaseMemObject(d_b);
	clReleaseMemObject(d_c);
	clReleaseProgram(program);
	clReleaseKernel(kernel);
	clReleaseCommandQueue(queue);
	clReleaseContext(context);

	//release host memory
	free(h_a);
	free(h_b);
	free(h_c);

	return EXIT_SUCCESS;
}
